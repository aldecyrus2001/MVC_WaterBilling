@page "/"
@layout AuthenticationLayout

<div class="container vh-100 d-flex align-items-center justify-content-center">
    <div class="container-fluid">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col-md-9 col-lg-6 col-xl-5">
                <img src="/logo.png" alt="Sample Image" class="img-fluid" />
            </div>
            <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
                <div class="d-flex align-items-center mb-3 pb-1">
                    <span class="h1 fw-bold mb-0">Authenticate</span>
                </div>

                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @Message
                    </div>
                }

                <!--Email Input-->
                <div class="form-outline mb-2" data-mb-input-init>
                    <input @bind="loginData.Email" type="email" id="EmailAddress" class="form-control form-control-lg" placeholder="Enter Valid Email Address" />
                </div>

                <!--Password Input-->
                <div class="form-outline mb-2" data-mb-input-init>
                    <input @bind="loginData.Password" type="password" id="Password" class="form-control form-control-lg" placeholder="Enter Password" />
                </div>

                <div class="d-flex justify-content-between align-items-center">
                    <div class="form-check mb-0">
                        <input class="form-check-input me-2" type="checkbox" id="RememberMe" @bind="RememberMe" />
                        <label class="form-check-label" for="RememberMe">Remember me</label>
                    </div>
                    <a href="#!" class="text-body">Forgot Password?</a>
                </div>

                <div class="text-center text-lg-center mt-4 pt-2">
                    <button type="button" data-mb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg" style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="Login">Login</button>
                </div>
            </div>
        </div>
    </div>
</div>


@inject NavigationManager navManager


@code {
    public AuthenticationDTO loginData { set; get; } = new();
    public JsonNode Errors { set; get; } = new JsonObject();
    public string UserRole { set; get; } = string.Empty;
    public string Message { set; get; } = string.Empty;
    public bool RememberMe { get; set; } = false;

    protected async Task Login()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(urls.AuthenticationURL, loginData);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadFromJsonAsync<JsonObject>();

                if (jsonResponse != null)
                {
                    Message = jsonResponse["message"]?.ToString() ?? "Login Successful";  // Default to 'Login Successful' if no message field

                    UserRole = jsonResponse["role"]?.ToString() ?? string.Empty;
                    UserStateService.SetUserRole(UserRole);
                    var userId = jsonResponse["userId"]?.ToString();
                    var token = jsonResponse["token"]?.ToString();
                    var role = jsonResponse["role"]?.ToString();

                    if (!string.IsNullOrEmpty(userId) && !string.IsNullOrEmpty(token))
                    {
                        
                        await sessionStorage.SetItemAsync("userId", userId);
                        await sessionStorage.SetItemAsync("token", token);
                        await sessionStorage.SetItemAsync("role", role);
                        
                    }

                    // Add logic for handling different roles (optional)
                    switch (UserRole)
                    {
                        case "Cashier":
                            navManager.NavigateTo("/Cashier-Dashboard");
                            break;
                        case "Administrator":
                            navManager.NavigateTo("/Administrator");
                            break;
                        case "Consumer":
                            Message = "Welcome, Consumer!";
                            break;
                        default:
                            Message = "Role not recognized.";
                            break;
                    }

                }
                else
                {
                    Message = "Failed to parse response.";
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<JsonObject>();
                Message = errorResponse?["message"]?.ToString() ?? "Login failed. Please input your credentials.";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    }
}