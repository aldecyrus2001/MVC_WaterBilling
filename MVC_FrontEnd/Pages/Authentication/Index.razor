@page "/"
@layout AuthenticationLayout

<link href="css/Login.css" rel="stylesheet" />

<div class="login-container">
    <div class="container">
        <div class="img">
            <img src="bg.svg">
        </div>
        <div class="login-content">
            <div class="form">
                <img src="avatar.svg">
                <h2 class="title">Welcome</h2>
                <div class="input-div one">
                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            @Message
                        </div>
                    }
                    <div class="i">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="div">
                        <input type="text" class="input" @bind="loginData.Email" placeholder="Email Address">
                    </div>
                </div>
                <div class="input-div pass">
                    <div class="i">
                        <i class="fas fa-lock"></i>
                    </div>
                    <div class="div">
                        <input type="password" class="input" @bind="loginData.Password" placeholder="Password">
                    </div>
                </div>
                <a href="#">Forgot Password?</a>
                <button class="btn" @onclick="Login">Login</button>
            </div>

            
        </div>
    </div>

</div>



@inject NavigationManager navManager


@code {
    public AuthenticationDTO loginData { set; get; } = new();
    public JsonNode Errors { set; get; } = new JsonObject();
    public string UserRole { set; get; } = string.Empty;
    public string Message { set; get; } = string.Empty;
    public bool RememberMe { get; set; } = false;

    protected async Task Login()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(urls.AuthenticationURL, loginData);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadFromJsonAsync<JsonObject>();

                if (jsonResponse != null)
                {
                    Message = jsonResponse["message"]?.ToString() ?? "Login Successful";  // Default to 'Login Successful' if no message field

                    UserRole = jsonResponse["role"]?.ToString() ?? string.Empty;
                    await UserStateService.SetUserRoleAsync(UserRole);
                    var userId = jsonResponse["userId"]?.ToString();
                    var fullName = jsonResponse["fullName"]?.ToString();
                    var token = jsonResponse["token"]?.ToString();
                    var role = jsonResponse["role"]?.ToString();

                    if (!string.IsNullOrEmpty(userId) && !string.IsNullOrEmpty(token))
                    {

                        await sessionStorage.SetItemAsync("userId", userId);
                        await sessionStorage.SetItemAsync("fullName", fullName);
                        await sessionStorage.SetItemAsync("token", token);
                        await sessionStorage.SetItemAsync("role", role);

                    }

                    // Add logic for handling different roles (optional)
                    switch (UserRole)
                    {
                        case "Cashier":
                            navManager.NavigateTo("/Cashier");
                            break;
                        case "Administrator":
                            navManager.NavigateTo("/Administrator");
                            break;
                        case "Consumer":
                            navManager.NavigateTo("/Consumer");
                            break;
                        case "Reader":
                            navManager.NavigateTo("/Reader");
                            break;
                        default:
                            Message = "Role not recognized.";
                            break;
                    }

                }
                else
                {
                    Message = "Failed to parse response.";
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<JsonObject>();
                Message = errorResponse?["message"]?.ToString() ?? "Login failed. Please input your credentials.";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    }
}