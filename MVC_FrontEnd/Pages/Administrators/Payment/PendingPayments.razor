@page "/Pending/Payments";
@using MVC_FrontEnd.Data
@using iTextSharp.text
@using iTextSharp.text.pdf

<div class="d-flex justify-content-between align-items-center mb-3">
	<div class="d-flex">
		<h5>Payments Records</h5>
		<span> | </span>
		<button @onclick="Export" class="btn btn-secondary p1">Export PDF</button>
	</div>
	<form method="post" class="d-flex" style="width: 300px;">
		<input @oninput="Search" style="max-width: 100%;" type="text" class="form-control me-2" placeholder="Search..." />
	</form>
</div>

@if (PaymentInformation == null || !PaymentInformation.Any())
{
	<p><em>No Data...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Reference Number</th>
				<th>Consumer's Name</th>
				<th>Usage</th>
				<th>Amount Used</th>
				<th>Amount Pay</th>
				<th>Paid Date</th>
				<th>Payment Method</th>
				<th>Action</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var payment in PaymentInformation)
			{
				<tr>
					<td>@(payment.payments.PaymentReferenceNumber)</td>
					<td>@($"{payment.user.Firstname} {payment.user.Lastname}")</td>
					<td>@payment.meterReading.Usage</td>
					<td>@(payment.bills.Consumed_Amount)</td>
					<td>@(payment.payments.Amount_Paid)</td>
					<td>@payment.payments.PaymentDate</td>
					<td>@payment.payments.PaymentMethod</td>
					<td class="text-end" style="vertical-align: middle;">
						<div class="d-flex justify-content-center">
							<button class="btn btn-success btn-sm" type="button" style="margin-right: 10px;">Accept</button>
							<button class="btn btn-danger btn-sm" type="button" style="margin-right: 10px;">Decline</button>
						</div>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<PaymentsWithUserConsumer>? PaymentInformation;
	private List<PaymentsWithUserConsumer>? AllPayments;
	private string searchQuery = "";


	[Inject]
	private IJSRuntime jsRuntime { get; set; }

	[Inject]
	private PaymentServices paymentServices { get; set; }

	protected override async Task OnInitializedAsync()
	{
		AllPayments = await paymentServices.GetPendingPayments();
		PaymentInformation = AllPayments;

	}

	private async Task Search(ChangeEventArgs e)
	{
		searchQuery = e.Value?.ToString() ?? "";
		ApplySearch();
	}

	private void ApplySearch()
	{
		if (string.IsNullOrWhiteSpace(searchQuery))
		{
			PaymentInformation = AllPayments;
		}
		else
		{
			var lowerSearch = searchQuery.ToLower();

			PaymentInformation = AllPayments?.Where(payment =>
				($"{payment.payments.PaymentReferenceNumber}").ToLower().Contains(lowerSearch) ||
				($"{payment.user.Firstname} {payment.user.Lastname}").ToLower().Contains(lowerSearch) ||
				($"{payment.meterReading.Usage}").Contains(lowerSearch) ||
				($"{payment.bills.Consumed_Amount}").Contains(lowerSearch) ||
				($"{payment.payments.PaymentDate}").Contains(lowerSearch) ||
				(payment.payments.PaymentMethod?.ToLower().Contains(lowerSearch) ?? false)
			).ToList();
		}
	}

	private async void Export()
	{
		using (MemoryStream stream = new MemoryStream())
		{
			Document doc = new Document(PageSize.A4);
			PdfWriter writer = PdfWriter.GetInstance(doc, stream);
			writer.PageEvent = new PdfHeaderFooter(); // Add this line if you have a header/footer class

			doc.Open();

			// Optional: Title
			Paragraph title = new Paragraph("Pending Payments Records", new Font(Font.HELVETICA, 18, Font.BOLD));
			title.Alignment = Element.ALIGN_CENTER;
			title.SpacingAfter = 20f;
			doc.Add(title);

			// Define fonts
			Font tableHeaderFont = new Font(Font.HELVETICA, 9, Font.BOLD, BaseColor.White);
			Font tableBodyFont = new Font(Font.HELVETICA, 9, Font.NORMAL, BaseColor.Black);

			// Table
			PdfPTable table = new PdfPTable(6); // 5 columns (not 6 based on your data)
			table.WidthPercentage = 100;

			table.SetWidths(new float[] { 2f, 3f, 1.5f, 1.5f, 1.5f, 3f });

			string[] headers = { "Reference No.", "Name", "Gender", "Email", "Role" };

			// Header row
			foreach (var header in headers)
			{
				PdfPCell headerCell = new PdfPCell(new Phrase(header, tableHeaderFont))
					{
						BackgroundColor = BaseColor.Gray
					};
				table.AddCell(headerCell);
			}

			// Data rows
			foreach (var payment in PaymentInformation)
			{
				table.AddCell(new Phrase(payment.payments.PaymentReferenceNumber, tableBodyFont));
				table.AddCell(new Phrase($"{payment.user.Firstname} {payment.user.Lastname}", tableBodyFont));
				table.AddCell(new Phrase($"{payment.meterReading.Usage}", tableBodyFont));
				table.AddCell(new Phrase($"{payment.bills.Consumed_Amount}", tableBodyFont));
				table.AddCell(new Phrase($"{payment.payments.PaymentDate}", tableBodyFont));
				table.AddCell(new Phrase($"{payment.payments.PaymentMethod}", tableBodyFont));
			}

			doc.Add(table);
			doc.Close();

			byte[] byteArray = stream.ToArray();
			await jsRuntime.SaveAs("PendingPaymentReport.pdf", byteArray);
		}
	}

}
