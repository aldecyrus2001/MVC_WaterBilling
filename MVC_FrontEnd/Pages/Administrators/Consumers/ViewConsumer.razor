@page "/ConsumerView"

@if (consumerData == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<h5 class="mb-3" id="exampleModalLabel">Apply User | @Id</h5>


	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="Firstname" IsDisabled="true" label="First Name" @bind-Value="consumerData.User.Firstname" />
		<InputComponent InputType="text" InputID="MiddleName" IsDisabled="true" label="Middle Name" @bind-Value="consumerData.User.Middlename" />
		<InputComponent InputType="text" InputID="LastName" IsDisabled="true" label="Last Name" @bind-Value="consumerData.User.Lastname" />
	</div>
	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="Gender" IsDisabled="true" label="Phone Number" @bind-Value="consumerData.User.Gender" />
		<InputComponent InputType="text" InputID="PhoneNumber" IsDisabled="true" label="Phone Number" @bind-Value ="consumerData.User.PhoneNumber" />
		<InputComponent InputType="email" InputID="EmailAddress" IsDisabled="true" label="Email Address" @bind-Value="consumerData.User.Email" />
	</div>

	<hr />

	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="Meter Number" IsDisabled="true" label="Meter Number" @bind-Value="consumerData.Consumer.Meter_Number" />

	</div>

	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="Meter Number" IsDisabled="true" label="Connection Type" @bind-Value="consumerData.Consumer.ConnectionType" />

		<InputComponent InputType="text" InputID="DateConnection" IsDisabled="true" label="Connection Date" @bind-Value="consumerData.Consumer.Connection_Date" />

		<InputComponent InputType="text" InputID="Address" IsDisabled="true" label="Address" @bind-Value="consumerData.Consumer.Address" />

	</div>



	<div class="d-flex justify-content-end">
		<a href="/Consumers" type="button" class="btn btn-danger me-3" data-bs-dismiss="modal">Close</a>
	</div>
}

@code {
	public int? Id { set; get; }
	private ConsumerWithUser? consumerData;

	[Inject]
	private URLStringServices URLStringServices { get; set; }

	[Inject]
	private ConsumerServices consumerServices { get; set; }

	protected override async void OnInitialized()
	{
		Id = URLStringServices.GetURLStringValueAsInt("id");
		await Task.CompletedTask;
	}

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			if(Id.HasValue)
			{
				consumerData = await consumerServices.GetConsumerByID(Id.Value);
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error Exception : {ex.Message}");
		}
	}
}
