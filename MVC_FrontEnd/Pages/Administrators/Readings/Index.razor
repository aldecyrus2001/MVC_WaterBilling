@page "/Readings"

<div class="d-flex justify-content-between align-items-center mb-3">
	<div class="d-flex flex-row gap-2 align-items-baseline">
		<h5>Readings Records</h5>
		<span> | </span>
		<a href="/CreateReading" class="btn btn-success p-1">Create Reading</a>
	</div>
	<form method="post" class="d-flex" style="width: 300px;">
		<input @oninput="Search" style="max-width: 100%;" type="text" class="form-control me-2" placeholder="Search..." />
	</form>
</div>

@if (ReadingInformations == null || !ReadingInformations.Any())
{
	<p><em>No Consumers Readings</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Reading ID</th>
				<th>Consumer's Name</th>
				<th>Address</th>
				<th>Usage</th>
				<th>Month</th>
				<th>Status</th>
				<th class="text-center">Action</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var reading in ReadingInformations)
			{
				<tr>
					<td>@(reading.meterReading.ReadingID)</td>
					<td>@($"{reading.users.Firstname} {reading.users.Lastname}")</td>
					<td>@(reading.consumers.Address)</td>
					<td>@(reading.meterReading.Usage)</td>
					<td>@(reading.meterReading.MonthOf)</td>
					<td>@(reading.meterReading.Status)</td>
					<td class="text-end" style="vertical-align: middle;">
						<div class="d-flex justify-content-center">
							<a href="/ReadingView?Id=@(reading.meterReading.ReadingID)" class="btn btn-success btn-sm" style="margin-right: 10px;">View</a>
							<button @onclick="() => DeleteReading(reading.meterReading.ReadingID)" class="btn btn-danger btn-sm" style="margin-right: 10px;">Delete</button>
						</div>
					</td>
				</tr>
			}


		</tbody>
	</table>
}

@code {

	private List<ReadingConsumerUser>? ReadingInformations;

	[Inject]
	private ReadingServices readingServices { get; set; }

	[Inject]
	private BillingService billServices { get; set; }

	[Inject]
	private IJSRuntime jsRuntime { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await authService.CheckAuthenticationAsync();
		ReadingInformations = await readingServices.GetReadingWithUserConsumerAsync();
	}

	private async Task DeleteReading(int Id)
	{
		// Show confirmation alert before deleting
		bool confirmDelete = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this reading?");

		if (confirmDelete)
		{
			await readingServices.DeleteReadingByID(Id);
			await billServices.DeleteBill(Id);
			ReadingInformations = await readingServices.GetReadingWithUserConsumerAsync();
		}
	}

	private async Task Search(ChangeEventArgs e)
	{
		string searchQuery = e.Value?.ToString() ?? "";
		string Urls = urls.Reading + $"/Search?search={searchQuery}";
		var result = await Http.GetFromJsonAsync<List<ReadingConsumerUser>>(Urls);

		if (result != null)
		{
			ReadingInformations = result;
		}
		else
		{

		}
	}

}
