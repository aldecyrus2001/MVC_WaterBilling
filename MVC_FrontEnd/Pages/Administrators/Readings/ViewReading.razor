@page "/ReadingView"

@if(readingData == null){
    <p><em>Loading...</em></p>
}
else {
    <h5 class="mb-3" id="exampleModalLabel">View Reading Record | @Id</h5>

    <div class="">
        <header>Consumer Information</header>
        <div class="row g-2 mb-2">
            <div class="col">
                <label for="Previous" class="form-label">First Name</label>
                <input type="text" id="Previous" class="form-control" @bind="userData.Firstname" disabled />
            </div>

            <div class="col">
                <label for="Previous" class="form-label">Middle Name</label>
                <input type="text" id="Previous" class="form-control" @bind="userData.Middlename" disabled />
            </div>

            <div class="col">
                <label for="Previous" class="form-label">Last Name</label>
                <input type="text" id="Previous" class="form-control" @bind="userData.Lastname" disabled />
            </div>

        </div>
        <div class="row g-2 mb-2">
            <div class="col">
                <label for="Previous" class="form-label">Gender</label>
                <input type="text" id="Previous" class="form-control" @bind="userData.Gender" disabled />
            </div>

            <div class="col">
                <label for="Previous" class="form-label">PhoneNumber</label>
                <input type="text" id="Previous" class="form-control" @bind="userData.PhoneNumber" disabled />
            </div>

            <div class="col">
                <label for="Previous" class="form-label">Email Address</label>
                <input type="text" id="Previous" class="form-control" @bind="userData.Email" disabled />
            </div>
        </div>
        <div class="row g-2 mb-2">
            <div class="col">
                <label for="Previous" class="form-label">Meter Number</label>
                <input type="text" id="Previous" class="form-control" @bind="readingData.Meter_Number" disabled />
            </div>
            <div class="col">
                <label for="Previous" class="form-label">Date Connection</label>
                <input type="text" id="Previous" class="form-control" @bind="consumersData.Connection_Date" disabled />
            </div>
            <div class="col">
                <label for="Previous" class="form-label">Address</label>
                <input type="text" id="Previous" class="form-control" @bind="consumersData.Address" disabled />
            </div>

        </div>
    </div>

    <hr />

    <div class="">
        <header>Reading Information</header>
        <div class="row g-2 mb-2">
            <div class="col">
                <label for="Previous" class="form-label">Previous Reading</label>
                <input type="text" id="Previous" class="form-control" @bind="readingData.Previous_Reading" disabled />
            </div>

            <div class="col">
                <label for="Current" class="form-label">Current Reading</label>
                <input type="text" id="Current" class="form-control" @bind="readingData.Current_Reading"  disabled/>
            </div>

            <div class="col">
                <label for="Usage" class="form-label">Usage</label>
                <input type="text" id="Usage" class="form-control" @bind="readingData.Usage" disabled />
            </div>

            <div class="col">
                <label for="Usage" class="form-label">Month Of</label>
                <input type="text" id="Usage" class="form-control" @bind="readingData.MonthOf" disabled />
            </div>

            @if(billsData == null) {

            }else 
            {
                <div class="col">
                    <label for="DateBilled" class="form-label">Bill Date</label>
                    <input type="date" id="DateBilled" class="form-control" @bind="billsData.BillDate" disabled />
                </div>
            }

            

        </div>

        @if (billsData == null)
        {

        }
        else
        {
            <div class="row g-2 mb-2">
                <div class="col">
                    <label for="Previous" class="form-label">Consumed Amount</label>
                    <input type="text" id="Previous" class="form-control" @bind="billsData.Consumed_Amount" disabled />
                </div>

                <div class="col">
                    <label for="Current" class="form-label">From Date</label>
                    <input type="date" id="Current" class="form-control" @bind="billsData.From" disabled />
                </div>

                <div class="col">
                    <label for="To" class="form-label">To Date</label>
                    <input type="date" id="To" class="form-control" @bind="billsData.To" disabled />
                </div>

                <div class="col">
                    <label for="DueDate" class="form-label">Due Date</label>
                    <input type="date" id="DueDate" class="form-control" @bind="billsData.DueDate" disabled />
                </div>


            </div>
        }

        <a href="/Readings" class="btn btn-succes">Close</a>

    </div>
}

@code {
    public int? Id;
    private Reading? readingData;
    private Consumers? consumersData;
    private Users? userData;
    private Bills? billsData;


    [Inject]
    private URLStringServices URLStringServices { get; set; }

    [Inject]
    private ReadingServices readingServices { get; set; }

    [Inject]
    private ConsumerServices consumerServices { get; set; }

    [Inject]
    private UsersServices usersServices { get; set; }

    [Inject]
    private BillingService? billingService { get; set; }

    [Inject]
    private AdvanceServices advanceServices { get; set; }


    protected override async void OnInitialized()
    {
        Id = URLStringServices.GetURLStringValueAsInt("id");
        await Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                readingData = await readingServices.GetReadingByID(Id.Value);

                if (readingData != null)
                {
                    consumersData = await consumerServices.GetConsumerByMeterNumber(readingData.Meter_Number);

                    if (consumersData != null && int.TryParse(consumersData.UserID, out int userId))
                    {
                        userData = await usersServices.GetUserByIdAsync(userId);

                        if(readingData != null) 
                        {
                            billsData = await billingService.GetBillingByReadingID(readingData.ReadingID);

                        }
                        else 
                        {
                            Console.WriteLine($"No reading data found for ID: {Id.Value}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Invalid UserID format or Consumer data is null.");
                    }
                }
                else
                {
                    Console.WriteLine($"No reading data found for ID: {Id.Value}");
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error Exception: {ex.Message}\nStackTrace: {ex.StackTrace}");
        }
    }

}
