@page "/UpdateUser"

@if (userData == null || GenderOption == null || PositionOption == null)
{
	<p><em>Loading...</em></p>
}
else 
{
	<h5 class="mb-3" id="exampleModalLabel">Update User | @Id</h5>

	<EditForm Model="userData">

	</EditForm>

	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="FirstName" IsDisabled="false" label="First Name" @bind-Value="userData.Firstname" />
		<InputComponent InputType="text" InputID="MiddleName" IsDisabled="false" label="Middle Name" @bind-Value="userData.Middlename" />
		<InputComponent InputType="text" InputID="LastName" IsDisabled="false" label="Last Name" @bind-Value="userData.Lastname" />
	</div>
	<div class="row g-2 mb-2">
		<div class="col">
			<label for="Gender" class="form-label">Gender</label>
			<select id="Gender" class="form-select" @bind="userData.Gender">
				<option value="n/a" selected disabled>-- Please Select Gender --</option>
				@if (GenderOption != null)
				{
					foreach (var option in GenderOption)
					{
						<option value="@option.Value">@option.Text</option>
					}
				}
			</select>
		</div>
		<InputComponent InputType="text" InputID="PhoneNumber" IsDisabled="false" label="Phone Number" @bind-Value="userData.PhoneNumber" />
		<InputComponent InputType="email" InputID="EmailAddress" IsDisabled="false" label="Email Address" @bind-Value="userData.Email" />
	</div>
	<hr />
	<div class="row g-2 mb-2">
		<div class="col">
			<label for="Position" class="form-label">Position</label>
			<select id="Position" class="form-select" @bind="userData.Role">
				<option value="n/a" selected disabled>-- Please Select Position --</option>
				@if (PositionOption != null)
				{
					foreach (var option in PositionOption)
					{
						<option value="@option.Value">@option.Text</option>
					}
				}
			</select>
		</div>
	</div>


	<div class="d-flex justify-content-end">
		<a href="/Users" type="button" class="btn btn-danger me-3" data-bs-dismiss="modal">Close</a>
		<button type="button" class="btn btn-success me-3" data-bs-dismiss="modal" @onclick="UpdateUserData">update</button>
	</div>
}




@code {

	public int? Id { set; get; }
	private Users? users;
	private UsersDTO? userData;


	public string Firstname { get; set; } = string.Empty;
	public string Middlename { get; set; } = string.Empty;
	public string Lastname { get; set; } = string.Empty;
	public string SelectedGender { get; set; } = string.Empty;
	public string PhoneNumber { get; set; } = string.Empty;
	public string EmailAddress { get; set; } = string.Empty;
	public string SelectedRole { get; set; } = string.Empty;

	[Inject]
	private URLStringServices URLStringServices { get; set; }

	[Inject]
	private UsersServices usersServices { get; set; }
	[Inject]
	private ComponentServices componentServices { get; set; }

	public List<SelectOptions> GenderOption { get; set; } = new();
	public List<SelectOptions> PositionOption { get; set; } = new();

	protected override async void OnInitialized()
	{
		Id = URLStringServices.GetURLStringValueAsInt("id");
		GenderOption = componentServices.GenderOptions;
		PositionOption = componentServices.PositionOptions;
		// await authService.CheckAuthenticationAsync();
		await Task.CompletedTask;

	}

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			if (Id.HasValue)
			{
				users = await usersServices.GetUserByIdAsync(Id.Value);
				if (users != null)
				{
					userData ??= new UsersDTO();

					{
						Firstname = users.Firstname;
						Middlename = users.Middlename;
						Lastname = users.Lastname;
						SelectedGender = users.Gender;
						PhoneNumber = users.PhoneNumber;
						EmailAddress = users.Email;
						SelectedRole = users.Role;

						componentServices.UpdateInputField(userData, "Firstname", users.Firstname);
						componentServices.UpdateInputField(userData, "Middlename", users.Middlename);
						componentServices.UpdateInputField(userData, "Lastname", users.Lastname);
						componentServices.UpdateInputField(userData, "Gender", users.Gender);
						componentServices.UpdateInputField(userData, "PhoneNumber", users.PhoneNumber);
						componentServices.UpdateInputField(userData, "Email", users.Email);
						componentServices.UpdateInputField(userData, "Role", users.Role);

					};

				}
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception : " + ex.Message);
		}
	}

	protected async Task UpdateUserData()
	{
		if (Id.HasValue)
		{
			bool isUpdated = await usersServices.UpdateUserAsync(Id.Value, userData);

			if (isUpdated)
			{
				navManager.NavigateTo("/Users");
			}
			else
			{
				Console.WriteLine("Failed to update user.");
			}
		}
	}

	
	



}
