@page "/UserView"

<h5 class="mb-3" id="exampleModalLabel">View User | @Id</h5>

@if(userData == null)
{
	<p><em>Loading...</em></p>
}
else 
{
	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="FirstName" IsDisabled="true" label="First Name" @bind-Value="Firstname" />
		<InputComponent InputType="text" InputID="MiddleName" IsDisabled="true" label="Middle Name" @bind-Value="Middlename" />
		<InputComponent InputType="text" InputID="LastName" IsDisabled="true" label="Last Name" @bind-Value="Lastname" />
	</div>
	<div class="row g-2 mb-2">
		<SelectComponent label="Gender" Id="genderSelect" SelectedValue="@SelectedGender" Options="@GenderOptions" isDisabled="true" />
		<InputComponent InputType="text" InputID="PhoneNumber" IsDisabled="true" label="Phone Number" @bind-Value="PhoneNumber" />
		<InputComponent InputType="text" InputID="EmailAddress" IsDisabled="true" label="Email Address" @bind-Value="EmailAddress" />

	</div>
	<hr />
	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="DateCreated" IsDisabled="true" label="Date Created" @bind-Value="DateCreated" />
		<InputComponent InputType="text" InputID="Role" IsDisabled="true" label="Role" @bind-Value="Role" />
	</div>

	<div class="d-flex justify-content-end">
		<a href="/Users" type="button" class="btn btn-secondary me-3" data-bs-dismiss="modal">Close</a>
	</div>

}


@code {

	public int? Id { set; get; }
	private Users? userData;

	public string Firstname { get; set; } = string.Empty;
	public string Middlename { get; set; } = string.Empty;
	public string Lastname { get; set; } = string.Empty;
	public string SelectedGender { get; set; } = string.Empty;
	public string PhoneNumber { get; set; } = string.Empty;
	public string EmailAddress { get; set; } = string.Empty;
	public string DateCreated { get; set; } = string.Empty;
	public string Role { get; set; } = string.Empty;


	[Inject]
	private URLStringServices URLStringServices { get; set; }

	[Inject]
	private UsersServices usersServices { get; set; }

	[Inject]
	private ComponentServices componentServices { get; set; }

	protected override async void OnInitialized()
	{
		Id = URLStringServices.GetURLStringValueAsInt("id");
		// await authService.CheckAuthenticationAsync();
		await Task.CompletedTask;

	}

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			if(Id.HasValue)
			{
				userData = await usersServices.GetUserByIdAsync(Id.Value);
				if (userData != null)
				{
					userData ??= new Users();
					{
						Firstname = userData.Firstname;
						Middlename = userData.Middlename;
						Lastname = userData.Lastname;
						SelectedGender = userData.Gender;
						PhoneNumber = userData.PhoneNumber;
						EmailAddress = userData.Email;
						DateCreated = userData.Date_Created.ToString("yyyy-MM-dd");
						Role = userData.Role;


						componentServices.UpdateInputField(userData, "Firstname", userData.Firstname);
						componentServices.UpdateInputField(userData, "Middlename", userData.Middlename);
						componentServices.UpdateInputField(userData, "Lastname", userData.Lastname);
						componentServices.UpdateInputField(userData, "Gender", userData.Gender);
						componentServices.UpdateInputField(userData, "PhoneNumber", userData.PhoneNumber);
						componentServices.UpdateInputField(userData, "Email", userData.Email);
						componentServices.UpdateInputField(userData, "DateCreated", userData.Date_Created.ToString("yyyy-MM-dd"));
						componentServices.UpdateInputField(userData, "Role", userData.Role);

					};

				}
			}
			
		}
		catch(Exception ex)
		{
			Console.WriteLine("Exception : " + ex.Message);
		}
	}

	private List<SelectOptions> GenderOptions { get; set; } = new()
	{
		new SelectOptions {Value = "Male", Text = "Male"},
		new SelectOptions {Value = "Female", Text = "Female"}
	};



}
