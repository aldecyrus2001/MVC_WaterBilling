@page "/User/Settings"

@if (userData == null)
{
	<p><em>Loading...</em></p>
}
else
{

	<Alert @ref="alertComponent" OnNotificationResponse="HandleNotificationResponse" />


	<h5 class="mb-3" id="exampleModalLabel">Settings</h5>

	<EditForm Model="userData">

	</EditForm>

	<div class="row g-2 mb-2">
		<InputComponent InputType="text" InputID="FirstName" IsDisabled="false" label="First Name" @bind-Value="userData.Firstname" />
		<InputComponent InputType="text" InputID="MiddleName" IsDisabled="false" label="Middle Name" @bind-Value="userData.Middlename" />
		<InputComponent InputType="text" InputID="LastName" IsDisabled="false" label="Last Name" @bind-Value="userData.Lastname" />
	</div>
	<div class="row g-2 mb-2">
		<div class="col">
			<label for="Gender" class="form-label">Gender</label>
			<select id="Gender" class="form-select" @bind="userData.Gender">
				<option value="n/a" selected disabled>-- Please Select Gender --</option>
				@if (GenderOption != null)
				{
					foreach (var option in GenderOption)
					{
						<option value="@option.Value">@option.Text</option>
					}
				}
			</select>
		</div>
		<InputComponent InputType="text" InputID="PhoneNumber" IsDisabled="false" label="Phone Number" @bind-Value="userData.PhoneNumber" />
		<InputComponent InputType="email" InputID="EmailAddress" IsDisabled="false" label="Email Address" @bind-Value="userData.Email" />
	</div>
	<div class="d-flex justify-content-end">
		<a href="/Users" type="button" class="btn btn-danger me-3" data-bs-dismiss="modal">Close</a>
		<button type="button" class="btn btn-success me-3" data-bs-dismiss="modal" @onclick="UpdateUserData">update</button>
	</div>
}




@code {
	private string UserId { get; set; }

	private Users? users;
	private Users? userData;


	public string Firstname { get; set; } = string.Empty;
	public string Middlename { get; set; } = string.Empty;
	public string Lastname { get; set; } = string.Empty;
	public string SelectedGender { get; set; } = string.Empty;
	public string PhoneNumber { get; set; } = string.Empty;
	public string EmailAddress { get; set; } = string.Empty;
	public string UserRole;

	private Alert? alertComponent;


	[Inject]
	private URLStringServices URLStringServices { get; set; }

	[Inject]
	private UsersServices usersServices { get; set; }
	[Inject]
	private ComponentServices componentServices { get; set; }

	public List<SelectOptions> GenderOption { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		GenderOption = componentServices.GenderOptions;
		// await authService.CheckAuthenticationAsync();

		var storedUserID = await sessionStorage.GetItemAsync<string>("userId");

		if (!string.IsNullOrEmpty(storedUserID))
		{
			UserId = storedUserID;
		}

		await Task.CompletedTask;

	}

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			users = await usersServices.GetUserByIdAsync(int.Parse(UserId));
			if (users != null)
			{
				userData ??= new Users();

				{
					Firstname = users.Firstname;
					Middlename = users.Middlename;
					Lastname = users.Lastname;
					SelectedGender = users.Gender;
					PhoneNumber = users.PhoneNumber;
					EmailAddress = users.Email;
					UserRole = users.Role;

					componentServices.UpdateInputField(userData, "Firstname", users.Firstname);
					componentServices.UpdateInputField(userData, "Middlename", users.Middlename);
					componentServices.UpdateInputField(userData, "Lastname", users.Lastname);
					componentServices.UpdateInputField(userData, "Gender", users.Gender);
					componentServices.UpdateInputField(userData, "PhoneNumber", users.PhoneNumber);
					componentServices.UpdateInputField(userData, "Email", users.Email);
					componentServices.UpdateInputField(userData, "Role", users.Role);

				};

			}

		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception : " + ex.Message);
		}
	}

	protected async Task UpdateUserData()
	{
		bool result = await alertComponent.ShowNotification("Do you want to update this user?", true, "success");

		await HandleNotificationResponse(result);
	}

	private async Task HandleNotificationResponse(bool response)
	{
		if (response)
		{
			if (UserId != null)
			{
				bool isUpdated = await usersServices.UpdateUserAsync(int.Parse(UserId), userData);

				if (isUpdated)
				{
					await sessionStorage.SetItemAsync("fullName", $"{userData.Firstname} {userData.Lastname}");
					UserStateService.NotifyStateChanged();

					await alertComponent.ShowNotification("Updated Successfully", false, "success");

					navManager.NavigateTo(navManager.Uri, forceLoad: true);
				}
				else
				{
					await alertComponent.ShowNotification("Failed to update data, Please Try Again.", false, "danger");

					navManager.NavigateTo(navManager.Uri, forceLoad: true);
				}
			}
		}
	}






}
